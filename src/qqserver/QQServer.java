package qqserver;import qqcommon.Message;import qqcommon.MessageType;import qqcommon.User;import java.io.*;import java.net.*;public class QQServer {    private ServerSocket serverSocket;    public static void main(String[] args) {        new Thread(new SendMessagetoALL()).start();        new ClientList();        new QQServer();    }    public QQServer() {        try {            //服务器端在9999端口监听            serverSocket = new ServerSocket(9999);            while (true) {                //为了时刻接收不同客户端的请求，将accept放在循环里持续接收请求                // 如果没有客户端链接则会阻塞                Socket socket = serverSocket.accept();                //连接成功后获得流对象                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());                ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());                //接收客户端发送的User对象                User user = (User) ois.readObject();                //核验User是否合法,将结果封装到Message返回给客户端                Message message = new Message();                if (ClientList.checkUser(user.getUserID(), user.getPassword())){                        //如果用户合法则发送message返回给客户端                        message.setMessageType(MessageType.MESSAGE_LOGIN_SUCCEED);                        oos.writeObject(message);                        //启动服务器对应该客户端的一个线程                        ServerThread sct = new ServerThread(socket,user.getUserID(),ois,oos);                        sct.start();                        //将此线程加入到集合中存储                        ManageThread.addThread(sct);                }else{                    //如果用户不合法则返回登陆失败的message                    message.setMessageType(MessageType.MESSAGE_LOGIN_FAILD);                    oos.writeObject(message);                    socket.close();                }            }        } catch (Exception e) {            throw new RuntimeException(e);        }finally {            try {                //如果循环退出则代表服务器关闭，不再监听端口                serverSocket.close();            } catch (IOException e) {                throw new RuntimeException(e);            }        }    }}